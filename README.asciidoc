= Dropbox SDK for Go

A Go SDK for integrating with the Dropbox API v2. Tested with Go 1.5+

== Installation

[source,sh]
----
$ go get github.com/dropbox/dropbox-sdk-go
----

Note that while the import path ends in `dropbox-sdk-go`, it actually exports the package `dropbox`. There are additional subpackages, one for each namespace in the https://www.dropbox.com/developers/documentation/http/documentation[API]:

  * `github.com/dropbox/dropbox-sdk-go/users`
  * `github.com/dropbox/dropbox-sdk-go/files`
  * `github.com/dropbox/dropbox-sdk-go/sharing`
  * `github.com/dropbox/dropbox-sdk-go/team`

== Usage

First, you need to https://dropbox.com/developers/apps:[register a new "app"] to start making API requests. Once you have created an app, you can either use the SDK via an access token (useful for testing) or via the regular OAuth2 flow (recommended for production).

=== Using OAuth token

Once you've created an app, you can get an access token from the app's console. Note that this token will only work for the Dropbox account the token is associated with.

WARNING: do NOT use this in production unless you know what you are doing!

[source,go]
----
// NOTE: this imports package `dropbox`
import "github.com/dropbox/dropbox-sdk-go"

func main() {
  api := dropbox.Client(token, true) // second argument enables verbose logging in the SDK
  // start making API calls
}
----

=== Using OAuth2 flow

For this, you will need your `APP_KEY` and `APP_SECRET` from the developers console. Your app will then have to take users though the oauth flow, as part of which users will explicitly grant permissions to your app. At the end of this process, users will get a token that the app can then use for subsequent authentication. See https://godoc.org/golang.org/x/oauth2#example-Config[this] for an example of oauth2 flow in Go.

Once you have the token, usage is same as above.

=== Making API calls

Each Dropbox API takes in a request type and returns a response type. For instance, https://www.dropbox.com/developers/documentation/http/documentation#users-get_account[/users/get_account] takes as input a `GetAccountArg` and returns a `BasicAccount`. The typical pattern for making API calls is:

  * Instantiate the argument via the `New*` convenience functions in the SDK
  * Invoke the API
  * Process the response (or handle error, as below)
  
Here's an example:

[source, go]
----
  arg := users.NewGetAccountArg()
  if resp, err := api.GetAccount(arg); err != nil {
    return err
  }
  fmt.Printf("Name: %v", resp.Name)
----

=== Error Handling

As described in the https://www.dropbox.com/developers/documentation/http/documentation#error-handling[API docs], all HTTP errors _except_ 409 are returned as-is to the client (with a helpful text message where possible). In case of a 409, the SDK will return an endpoint-specific error as described in the API. This will be made available as `EndpointError` member in the error.

== Note on using the Teams API

All features of the Team API are supported except https://www.dropbox.com/developers/documentation/http/teams#teams-member-file-access[acting on behalf of team members]. This should be available soon.

Note that to use the Team API, you will need to create a Dropbox Business App. The OAuth token from this app will _only_ work for the Team API.

Please read the https://www.dropbox.com/developers/documentation/http/teams[API docs] carefully to appropriate secure your apps and tokens when using the Team API.

== Caveats

This SDK only supports the v2 API, which means that v1 features not available in v2 yet are not supported. For instance, the Audit log endpoint of the Business API is not supported yet, but it will be as soon as it is available in the v2 API.
