= Dropbox SDK for Go

A Go SDK for integrating with the Dropbox API v2. Tested with Go 1.5+

== Installation

[source,sh]
----
$ go get github.com/dropbox/dropbox-sdk-go
----

Note that while the import path ends in `dropbox-sdk-go`, it actually exports the package `dropbox`. There are additional subpackages, one for each namespace in the https://www.dropbox.com/developers/documentation/http/documentation[API]:

  * `github.com/dropbox/dropbox-sdk-go/users`
  * `github.com/dropbox/dropbox-sdk-go/files`
  * `github.com/dropbox/dropbox-sdk-go/sharing`

== Usage

First, you need to https://dropbox.com/developers/apps:[register a new "app"] to start making API requests. Once you have created an app, you can either use the SDK via an access token (useful for testing) or via the regular OAuth2 flow (recommended for production).

=== Using OAuth token

Once you've created an app, you can get an access token from the app's console. Note that this token will only work for the Dropbox account the token is associated with.

WARNING: do NOT use this in production unless you know what you are doing!

[source,go]
----
// NOTE: this imports package `dropbox`
import "github.com/dropbox/dropbox-sdk-go"

func main() {
  api := dropbox.Client(token, true) // second argument enables verbose logging in the SDK
  // start making API calls
}
----

=== Using OAuth2 flow

For this, you will need your `APP_KEY` and `APP_SECRET` from the developers console. When you first initialize the SDK, users will be taken to an authorization page where they will get an access token.
The SDK includes a convenient feature for reusing these access tokens so users don't need to go through the flow each time.

Sample usage:

[source, go]
----
const (
  configFileName = "auth.conf"
  appKey         = "YOUR_APP_KEY"
  appSecret      = "YOUR_APP_SECRET"
)

func main() {
  u, err := user.Current()
  if u == nil || err != nil {
    return err
  }
  filePath := path.Join(u.HomeDir, ".config", "your_app", configFileName)
  // last argument enables verbose logging
  api, err := dropbox.OAuthClient(appKey, appSecret, filePath, true)
  // check err before making api calls
}
----

=== Making API calls

Each Dropbox API takes in a request type and returns a response type. For instance, https://www.dropbox.com/developers/documentation/http/documentation#users-get_account[/users/get_account] takes as input a `GetAccountArg` and returns a `BasicAccount`. The typical pattern for making API calls is:

  * Instantiate the argument via the `New*` convenience functions in the SDK
  * Invoke the API
  * Process the response (or handle error, as below)
  
Here's an example:

[source, go]
----
  arg := users.NewGetAccountArg()
  if resp, err := api.GetAccount(arg); err != nil {
    return err
  }
  fmt.Printf("Name: %v", resp.Name)
----



=== Error Handling

== Caveats

== Known Issues
